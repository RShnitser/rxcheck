// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: answers.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createAnswer = `-- name: CreateAnswer :one
INSERT INTO answers (id, text, answer_order, question_id)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3
)
RETURNING id, text, answer_order, question_id
`

type CreateAnswerParams struct {
	Text        string
	AnswerOrder int32
	QuestionID  uuid.UUID
}

func (q *Queries) CreateAnswer(ctx context.Context, arg CreateAnswerParams) (Answer, error) {
	row := q.db.QueryRowContext(ctx, createAnswer, arg.Text, arg.AnswerOrder, arg.QuestionID)
	var i Answer
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.AnswerOrder,
		&i.QuestionID,
	)
	return i, err
}

const deleteAnswer = `-- name: DeleteAnswer :exec
DELETE FROM answers
`

func (q *Queries) DeleteAnswer(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAnswer)
	return err
}

const listAnswersByQuestion = `-- name: ListAnswersByQuestion :exec
SELECT id, text, answer_order, question_id FROM answers
WHERE question_id = $1
`

func (q *Queries) ListAnswersByQuestion(ctx context.Context, questionID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, listAnswersByQuestion, questionID)
	return err
}
