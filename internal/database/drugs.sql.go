// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: drugs.sql

package database

import (
	"context"
)

const createDrug = `-- name: CreateDrug :one
INSERT INTO drugs (id, generic_name, brand_name, classification_id)
VALUES (
    ?,
    ?,
    ?,
    ?
)
RETURNING id, generic_name, brand_name, classification_id
`

type CreateDrugParams struct {
	ID               string
	GenericName      string
	BrandName        string
	ClassificationID string
}

func (q *Queries) CreateDrug(ctx context.Context, arg CreateDrugParams) (Drug, error) {
	row := q.db.QueryRowContext(ctx, createDrug,
		arg.ID,
		arg.GenericName,
		arg.BrandName,
		arg.ClassificationID,
	)
	var i Drug
	err := row.Scan(
		&i.ID,
		&i.GenericName,
		&i.BrandName,
		&i.ClassificationID,
	)
	return i, err
}

const deleteDrugs = `-- name: DeleteDrugs :exec
DELETE FROM drugs
`

func (q *Queries) DeleteDrugs(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteDrugs)
	return err
}

const getDrugByGenericName = `-- name: GetDrugByGenericName :one
SELECT id, generic_name, brand_name, classification_id FROM drugs
WHERE generic_name = ?
`

func (q *Queries) GetDrugByGenericName(ctx context.Context, genericName string) (Drug, error) {
	row := q.db.QueryRowContext(ctx, getDrugByGenericName, genericName)
	var i Drug
	err := row.Scan(
		&i.ID,
		&i.GenericName,
		&i.BrandName,
		&i.ClassificationID,
	)
	return i, err
}

const listDrugsByClassification = `-- name: ListDrugsByClassification :many
SELECT
    classifications.name as classification,
    group_concat(drugs.generic_name) as drugs
FROM 
    drugs
    JOIN classifications ON drugs.classification_id = classifications.id
GROUP BY classifications.name
ORDER BY classifications.name
`

type ListDrugsByClassificationRow struct {
	Classification string
	Drugs          string
}

func (q *Queries) ListDrugsByClassification(ctx context.Context) ([]ListDrugsByClassificationRow, error) {
	rows, err := q.db.QueryContext(ctx, listDrugsByClassification)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListDrugsByClassificationRow
	for rows.Next() {
		var i ListDrugsByClassificationRow
		if err := rows.Scan(&i.Classification, &i.Drugs); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
