// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: drugs.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createDrug = `-- name: CreateDrug :one
INSERT INTO drugs (id, generic_name, brand_name, classification_id)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3
)
RETURNING id, generic_name, brand_name, classification_id
`

type CreateDrugParams struct {
	GenericName      string
	BrandName        string
	ClassificationID uuid.UUID
}

func (q *Queries) CreateDrug(ctx context.Context, arg CreateDrugParams) (Drug, error) {
	row := q.db.QueryRowContext(ctx, createDrug, arg.GenericName, arg.BrandName, arg.ClassificationID)
	var i Drug
	err := row.Scan(
		&i.ID,
		&i.GenericName,
		&i.BrandName,
		&i.ClassificationID,
	)
	return i, err
}

const deleteDrugs = `-- name: DeleteDrugs :exec
DELETE FROM drugs
`

func (q *Queries) DeleteDrugs(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteDrugs)
	return err
}

const listDrugsByClassification = `-- name: ListDrugsByClassification :many
SELECT id, generic_name, brand_name, classification_id FROM drugs
WHERE classification_id = $1
`

func (q *Queries) ListDrugsByClassification(ctx context.Context, classificationID uuid.UUID) ([]Drug, error) {
	rows, err := q.db.QueryContext(ctx, listDrugsByClassification, classificationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Drug
	for rows.Next() {
		var i Drug
		if err := rows.Scan(
			&i.ID,
			&i.GenericName,
			&i.BrandName,
			&i.ClassificationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
