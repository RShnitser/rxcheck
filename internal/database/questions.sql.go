// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: questions.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createQuestion = `-- name: CreateQuestion :one
INSERT INTO questions (id, text, classification_id, drug_id)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3
)
RETURNING id, text, classification_id, drug_id
`

type CreateQuestionParams struct {
	Text             string
	ClassificationID uuid.UUID
	DrugID           uuid.UUID
}

func (q *Queries) CreateQuestion(ctx context.Context, arg CreateQuestionParams) (Question, error) {
	row := q.db.QueryRowContext(ctx, createQuestion, arg.Text, arg.ClassificationID, arg.DrugID)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.ClassificationID,
		&i.DrugID,
	)
	return i, err
}

const deleteQuestions = `-- name: DeleteQuestions :exec
DELETE FROM questions
`

func (q *Queries) DeleteQuestions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteQuestions)
	return err
}

const listQuestionByClassification = `-- name: ListQuestionByClassification :many
SELECT id, text, classification_id, drug_id FROM questions
WHERE classification_id = $1
`

func (q *Queries) ListQuestionByClassification(ctx context.Context, classificationID uuid.UUID) ([]Question, error) {
	rows, err := q.db.QueryContext(ctx, listQuestionByClassification, classificationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Question
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.ClassificationID,
			&i.DrugID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
